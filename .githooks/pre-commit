#!/bin/bash

function generate_staging
{
    TMP_STAGING="tmp_staging"

    # parse config
    CONFIG_FILE=$(dirname $0)/config
    if [ -e $CONFIG_FILE ]; then
        . $CONFIG_FILE
    fi

    # stolen from template file
    if git rev-parse --verify origin/master > /dev/null
    then
        against=origin/master
    else
        # Initial commit: diff against an empty tree object
        against=4b825dc642cb6eb9a060e54bf8d69288fbee4904
    fi

    # this is the magic:
    # retrieve all files in staging area that are added, modified or renamed
    # but no deletions etc
    FILES=$(git diff-index --name-only --cached --diff-filter=ACMR $against -- )

    if [ "$FILES" == "" ]; then
        return 0;
    fi

    # create temporary copy of staging area
    if [ -e $TMP_STAGING ]; then
        rm -rf $TMP_STAGING
    fi
    mkdir $TMP_STAGING

    # match files against whitelist
    FILES_TO_CHECK=""
    for FILE in $FILES
    do
        RETVAL=$?
        if [ "$RETVAL" -eq "0" ]
        then
            FILES_TO_CHECK="$FILES_TO_CHECK $FILE"
        fi
    done

    if [ "$FILES_TO_CHECK" == "" ]; then
        return 0;
    fi

    # Copy contents of staged version of files to temporary staging area
    # because we only want the staged version that will be commited and not
    # the version in the working directory
    STAGED_FILES=""
    for FILE in $FILES_TO_CHECK
    do
      ID=$(git diff-index --cached $against $FILE | cut -d " " -f4)

      # create staged version of file in temporary staging area with the same
      # path as the original file so that the phpcs ignore filters can be applied
      mkdir -p "$TMP_STAGING/$(dirname $FILE)"
      git cat-file blob $ID > "$TMP_STAGING/$FILE"
      STAGED_FILES="$STAGED_FILES $TMP_STAGING/$FILE"
    done

    return 1;
}

function do_phpcs
{
    # PHP CodeSniffer pre-commit hook for git
    PHPCS_BIN=`which phpcs`
    if [ "$?" -eq "1" ]; then
        PHPCS_BIN='phpcs'
    fi

    # simple check if code sniffer is set up correctly
    if [ ! -x $PHPCS_BIN ]; then
        echo "PHP CodeSniffer bin not found or executable"
        return 0;
    fi

    OUTPUT=$($PHPCS_BIN -s $STAGED_FILES)
    RETVAL=$?

    if [ $RETVAL -ne 0 ]; then
        echo "$OUTPUT" | less
    fi

    return $RETVAL;
}


function do_eslint
{
    # PHP CodeSniffer pre-commit hook for git
    ESLINT_BIN=`which eslint`
    if [ "$?" -eq "1" ]; then
        ESLINT_BIN='eslint'
    fi

    # simple check if code sniffer is set up correctly
    if [ ! -x $ESLINT_BIN ]; then
        echo "ESLint  bin not found or executable"
        return 0;
    fi

    FILES_TO_CHECK=""
    for FILE in $STAGED_FILES
    do
        ENTRY=$(echo $FILE | grep ".jsx\{0,1\}$");
        FILES_TO_CHECK="$FILES_TO_CHECK $ENTRY"
    done

    OUTPUT=$($ESLINT_BIN --quiet $FILES_TO_CHECK)
    RETVAL=$?

    if [ $RETVAL -ne 0 ]; then
        echo "$OUTPUT" | less
    fi

    return $RETVAL;
}

generate_staging

do_phpcs
RETVAL=$?
if [ $RETVAL -eq 0 ]; then
    do_eslint
    RETVAL=$?
fi

# delete temporary copy of staging area
rm -rf $TMP_STAGING

exit $RETVAL;
